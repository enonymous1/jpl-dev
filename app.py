#!/usr/bin/env python3
"""
JPL Development Portfolio - Flask Web Application

A Flask-based web application showcasing development projects and tools.
This application supports both live development and static site generation
for deployment to GitHub Pages.

Features:
- Modular project architecture using Flask Blueprints
- Static site generation with Flask-Frozen
- Custom template filters for enhanced rendering
- Responsive design with modern CSS architecture

Author: JPL Development
Date: July 2025
"""

from flask import Flask, render_template
from flask_frozen import Freezer
from projects.gsa_mas_checklist import gsa_mas_checklist_bp
from projects.schedule_maker import schedule_maker_bp
from config.data_access import get_all_projects

# Initialize Flask application
app = Flask(__name__)

# Configure Flask-Frozen for static site generation
app.config['FREEZER_DESTINATION'] = 'docs'  # Output directory for GitHub Pages
app.config['FREEZER_RELATIVE_URLS'] = True  # Use relative URLs for portability

# Initialize the static site generator
freezer = Freezer(app)

# ============================================================================
# BLUEPRINT REGISTRATION
# ============================================================================

# Register project blueprints for modular application structure
app.register_blueprint(gsa_mas_checklist_bp)
app.register_blueprint(schedule_maker_bp)


# ============================================================================
# CUSTOM TEMPLATE FILTERS
# ============================================================================

@app.template_filter('nl2br')
def nl2br_filter(text):
    """
    Convert newline characters to HTML line breaks.
    
    This custom Jinja2 filter transforms plain text newlines (\n) into
    HTML <br> tags, preserving line breaks when rendering text in templates.
    
    Args:
        text (str or None): The input text to process
        
    Returns:
        str: Text with newlines converted to HTML breaks, or empty string if input is None
        
    Example:
        In template: {{ some_text | nl2br | safe }}
        Input: "Line 1\nLine 2"
        Output: "Line 1<br>\nLine 2"
    """
    if text is None:
        return ''
    return text.replace('\n', '<br>\n')


# ============================================================================
# ROUTE DEFINITIONS
# ============================================================================

@app.route('/')
def index():
    """
    Render the main homepage.
    
    Returns:
        str: Rendered HTML template for the homepage
    """
    return render_template('index.html')


@app.route('/projects/')
def projects():
    """
    Render the projects overview page.
    
    This page displays a list of all available project demonstrations
    and tools in the portfolio, loaded from the projects_data configuration.
    
    Returns:
        str: Rendered HTML template for the projects page with project data
    """
    projects_list = get_all_projects()
    return render_template('projects.html', projects=projects_list)


# ============================================================================
# APPLICATION ENTRY POINT
# ============================================================================

if __name__ == '__main__':
    # Run the Flask development server
    # Note: This is only used during development. Production deployment
    # uses the static files generated by freeze.py
    app.run(debug=True)
